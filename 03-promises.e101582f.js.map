{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAIMC,EAAOC,SAASC,cAAc,SACtBD,SAASC,cAAc,kBACxBD,SAASC,cAAc,iBACrBD,SAASC,cAAc,mBAItC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAEtBG,EAAO,CAAEJ,WAAUS,MAAAR,G,GAClBA,E,IAVPL,EAAKc,iBAAiB,UActB,SAAkBC,GAChBA,EAAEC,iBAKF,IAJA,IAAIC,EAAaC,OAAOH,EAAEI,cAAcC,SAASP,MAAMQ,OACnDC,EAAYJ,OAAOH,EAAEI,cAAcC,SAASG,KAAKF,OACjDG,EAAcN,OAAOH,EAAEI,cAAcC,SAASK,OAAOJ,OAEhDK,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EACrCvB,EAAcuB,EAAGT,GACdU,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUyB,EAAKD,EAALf,MACjBf,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAANH,EAAM,MAAK,CAC9DI,QAAO,K,IAGZC,OAAM,SAAAN,G,IAAGxB,EAAQwB,EAARxB,SAAU+B,EAAKP,EAALf,MAClBf,EAAAgC,OAAOM,QAAQ,sBAAuCJ,OAAf5B,EAAS,QAAY4B,OAANG,EAAM,MAAK,CAC7DF,QAAO,K,IAGfhB,GAAcK,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\nconst form = document.querySelector('.form');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst step = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', onSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  let delayInput = Number(e.currentTarget.elements.delay.value);\n  let stepInput = Number(e.currentTarget.elements.step.value);\n  let amountInput = Number(e.currentTarget.elements.amount.value);\n\n  for (let i = 1; i <= amountInput; i += 1) {\n    createPromise(i, delayInput)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n        });\n      });\n    delayInput += stepInput;\n  }\n}\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","e","preventDefault","delayInput","Number","currentTarget","elements","value","stepInput","step","amountInput","amount","i","then","param","delay2","Notify","success","concat","timeout","catch","delay3","failure"],"version":3,"file":"03-promises.e101582f.js.map"}